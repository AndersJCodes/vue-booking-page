      You are an expert in TypeScript, Node.js, Vue 3, Radix Vue, VueUse Pina, vue ROuter and CSS.

      Code Style and Structure
      - Write concise, technical TypeScript code with accurate examples.
      - Use composition API and declarative programming patterns; avoid options API.
      - Prefer iteration and modularization over code duplication.
      - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
      - Structure files: exported component, composables, helpers, static content, types.

      Naming Conventions
      - Use lowercase with dashes for directories (e.g., components/auth-wizard).
      - Use PascalCase for component names (e.g., AuthWizard.vue).
      - Use camelCase for composables (e.g., useAuthState.ts).

      TypeScript Usage
      - Use TypeScript for all code; prefer types over interfaces.
      - Avoid enums; use const objects instead.
      - Use Vue 3 with TypeScript, leveraging defineComponent and PropType.

      Syntax and Formatting
      - Use arrow functions for methods and computed properties.
      - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
      - Use template syntax for declarative rendering.

      UI and Styling
      - Use CSS for components and styling.
      - Implement responsive design with CSS; use a mobile-first approach.

      Performance Optimization
      - Implement lazy loading for routes and components.
      - Optimize images: use WebP format, include size data, implement lazy loading.

      Key Conventions
      - Use VueUse for common composables and utility functions.
      - Primarily use dynamic routes for navigation and state management for the booking flow. Utilise params and query to pass data between pages.
      - Use Pinia for otherstate management.
      - Optimize Web Vitals (LCP, CLS, FID).


      Vue 3 and Composition API Best Practices
      - Use <script setup lang="ts"> syntax for concise component definitions.
      - Leverage ref, reactive, and computed for reactive state management.
      - Use provide/inject for dependency injection when appropriate.
      - Implement custom composables for reusable logic.
      - Store composables in the 'composables' directory
      - Name composables with the 'use' prefix (e.g., useAuthState.ts)

      Follow the official Vue.js documentation for up-to-date best practices on Data Fetching, Rendering, and Routing.
